"""
Class to generate error JSON error structures to return to caller
Generated by https://app.quicktype.io

All elements are optional except for 'exception-message'
{
        "action-attempted": "action",
        "target-of-action": "target",
        "exception-raised": "exception",
        "exception-message": "message"
}

"""

# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = error_from_dict(json.loads(json_string))

from typing import Optional, Any, TypeVar, Type, cast


T = TypeVar("T")


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


class Error:
    action_attempted: Optional[str]
    target_of_action: Optional[str]
    exception_raised: Optional[str]
    exception_message: str

    def __init__(self,
                 action_attempted: Optional[str],
                 target_of_action: Optional[str],
                 exception_raised: Optional[str],
                 exception_message: str
                 ) -> None:
        self.action_attempted = action_attempted
        self.target_of_action = target_of_action
        self.exception_raised = exception_raised
        self.exception_message = exception_message

    @staticmethod
    def from_dict(obj: Any) -> 'Error':
        assert isinstance(obj, dict)
        action_attempted = from_union([from_str, from_none], obj.get("action-attempted"))
        target_of_action = from_union([from_str, from_none], obj.get("target-of-action"))
        exception_raised = from_union([from_str, from_none], obj.get("exception-raised"))
        exception_message = obj.get("exception-message")
        return Error(action_attempted, target_of_action, exception_raised, exception_message)

    def to_dict(self) -> dict:
        result: dict = {}
        result["action-attempted"] = from_union([from_str, from_none], self.action_attempted)
        result["target-of-action"] = from_union([from_str, from_none], self.target_of_action)
        result["exception-raised"] = from_union([from_str, from_none], self.exception_raised)
        result["exception-message"] = self.exception_message
        return result


def error_from_dict(s: Any) -> Error:
    return Error.from_dict(s)


def error_to_dict(x: Error) -> Any:
    return to_class(Error, x)
